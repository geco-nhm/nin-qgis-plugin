unique_bs <- bs[!(bs %in% preserve_bs)]
#Only keep unique basic steps and collapse them into one element
preserve_bs <<- unique(c(preserve_bs, unique_bs))
paste(unique_bs, collapse = "")
})
#Return the LEC to the original order
modified_lec <- as.character(modified_lec[order(length_order_index)])
#Return the modified LEC
return(modified_lec)
}
as.character(remove_common_preserve_short(lec_vector))
lec_vector
lec_vector <- c("abc","def","f","fgh")
#Define function to identify major-type specific steps
find.mt.steps <- function(lec_vector) {
#Identify all unique basic steps
all_steps <- unique(unlist(strsplit(paste(lec_vector, collapse = ""), "")))
#Map each basic step to the indices of the mapping unit containing it
step_indices <- lapply(all_steps, function(char) {
which(sapply(lec_vector, function(x) grepl(char, x)))
})
#Rename list elements with basic steps
names(step_indices) <- all_steps
#Create list
minimal_strings <- list()
i = "a"
#For each character, find the string with the smallest length containing that character
for (i in all_steps) {
#Identify the index of the mapping units containing the character
mu_indices <- which(sapply(lec_vector, function(x) grepl(i, x)))
#Find the index of the string with the smallest length among those that contain the character
min_length <- mu_indices[which.min(sapply(lec_vector[mu_indices], nchar))]
#Store the basic steos in the list
step_indices[[i]] <- lec_vector[min_length]
}
#Find the unique elements
selected_indices <- unique(unlist(step_indices))
#Return the sorted indices
return(sort(selected_indices))
}
lec_vector <- find.mt.steps(lec_vector)
lec_vector
#Function to selectively remove characters from longer strings
remove_common_preserve_short <- function(lec_vector) {
#Sort LEC steps by length
length_order_index <- order(nchar(lec_vector))
length_order <- lec_vector[length_order_index]
#Create vector for preserved basic steps
preserve_bs <- character()
x <- length_order[1]
# Process each string, starting with the shortest
modified_lec <- sapply(length_order, function(x) {
#Split the LEC step into basic steps
bs <- strsplit(x, NULL)[[1]]
#Add basic steps that are not yet preserved
unique_bs <- bs[!(bs %in% preserve_bs)]
#Only keep unique basic steps and collapse them into one element
preserve_bs <<- unique(c(preserve_bs, unique_bs))
paste(unique_bs, collapse = "")
})
#Return the LEC to the original order
modified_lec <- as.character(modified_lec[order(length_order_index)])
#Return the modified LEC
return(modified_lec)
}
as.character(remove_common_preserve_short(lec_vector))
#Function to selectively remove characters from longer strings
remove.common.bs <- function(lec_vector) {
#Sort LEC steps by length
length_order_index <- order(nchar(lec_vector))
length_order <- lec_vector[length_order_index]
#Create vector for preserved basic steps
preserve_bs <- character()
x <- length_order[1]
# Process each string, starting with the shortest
modified_lec <- sapply(length_order, function(x) {
#Split the LEC step into basic steps
bs <- strsplit(x, NULL)[[1]]
#Add basic steps that are not yet preserved
unique_bs <- bs[!(bs %in% preserve_bs)]
#Only keep unique basic steps and collapse them into one element
preserve_bs <<- unique(c(preserve_bs, unique_bs))
paste(unique_bs, collapse = "")
})
#Return the LEC to the original order
modified_lec <- as.character(modified_lec[order(length_order_index)])
#Return the modified LEC
return(as.character(modified_lec))
}
remove.common.bs(lec_vector)
mt_specific_steps
lec_vector <- c("abc","def","f","fgh")
#Remove missing elements
lec_vector <- lec_vector[!is.na(lec_vector)]
lec_vector
#Unlist vector
unlisted_vector <- unlist(lec_vector)
unlisted_vector
i=1
#Remove missing elements
lec_vector <- lec_vector[!is.na(lec_vector)]
#Unlist vector
lec_unlisted <- unlist(lec_vector)
#Identify LEC steps by removing underscores
lec_steps <- sub(".*_", "", lec_unlisted)
#Identify LECs
lec_vector <- sub("_.*", "", lec_unlisted)
#Identify unique LECs
lec_unique <- unique(lec_vector)
lec_unique
#Create vector for storing new LEC values
new_vector <- numeric()
#Identify the current LEC
current_lec <- which(lec_vector == lec_unique[i])
current_lec
aggregate_unique_sorted(lec_steps[current_lec])
aggregate_unique_sorted
#Define the function
aggregate_unique_sorted <- function(char_vector) {
#Remove missing elements
char_vector <- char_vector[!is.na(char_vector)]
# Collapse all elements into one string
combined <- paste(char_vector, collapse = "")
# Split into individual characters, get unique letters, and sort them
unique_sorted <- sort(unique(unlist(strsplit(combined, ""))))
# Combine back into a single string
result <- paste(unique_sorted, collapse = "")
#Return NA if the vector is empty
if(result == "") {
return(NA)
} else {
return(result)
}
}
aggregate_unique_sorted(lec_steps[current_lec])
current_lec
aggregate_unique_sorted
aggregate_unique_sorted(lec_steps[current_lec])
lec_steps
current_lec
#Only keep unique basic steps and sort them
new_lec <- aggregate_unique_sorted(lec_steps[current_lec])
lec_vector
#Remove missing elements
lec_vector <- lec_vector[!is.na(lec_vector)]
#Collapse all bs into one string
lec_collapsed <- paste(lec_vector, collapse = "")
lec_collapsed
#Define the function
bs.unique.sorted <- function(lec_vector) {
#Remove missing elements
lec_vector <- lec_vector[!is.na(lec_vector)]
#Collapse all bs into one string
lec_collapsed <- paste(lec_vector, collapse = "")
#Split into individual sorted unique basic steps
bs_unique_sorted <- sort(unique(unlist(strsplit(lec_collapsed, ""))))
#Merge into a single string
lec_new <- paste(bs_unique_sorted, collapse = "")
#Return NA if the vector is empty
if(lec_new == "") {
#Return NA
return(NA)
} else {
#Otherwise return the new LECs
return(lec_new)
}
}
#Define function to aggregate LEC steps
aggregate.lec.vector <- function(lec_vector) {
#Remove missing elements
lec_vector <- lec_vector[!is.na(lec_vector)]
#Unlist vector
lec_unlisted <- unlist(lec_vector)
#Identify LEC steps by removing underscores
lec_steps <- sub(".*_", "", lec_unlisted)
#Identify LECs
lec_vector <- sub("_.*", "", lec_unlisted)
#Identify unique LECs
lec_unique <- unique(lec_vector)
#Create vector for storing new LEC values
new_vector <- numeric()
#Loop over all unique LEC steps
for (i in seq_along(lec_unique)) {
#Identify the current LEC
current_lec <- which(lec_vector == lec_unique[i])
#Only keep unique basic steps and sort them
new_lec <- bs.unique.sorted(lec_steps[current_lec])
#Paste the LEC with the basic steps and store it in the vector
new_vector[i] <- paste0(lec_unique[i], "_", new_lec)
}
#Return the new LECs
return(new_vector)
}
aggregate.lec.vector(lec_vector)
aggregate.lec.vector(list(lec_vector))
.libPaths()
list.files("C:/Users/adamen/AppData/Local/R/win-library/4.2")
list.files("C:/Program Files/R/R-4.2.3/library")
unique(list.files("C:/Users/adamen/AppData/Local/R/win-library/4.2"),
list.files("C:/Program Files/R/R-4.2.3/library"))
unique(c(list.files("C:/Users/adamen/AppData/Local/R/win-library/4.2"),
list.files("C:/Program Files/R/R-4.2.3/library")))
# Install and load necessary packages
library(sf)
library(fasterize)
library(raster)
library(terra)
library(stringr)
#Create function that rounds to the nearest five
round.to.five <- function(x, direction = "down") {
if (direction == "down") {
# Round down to the nearest 5
rounded_number <- floor(x / 10) * 10 + 5
if (rounded_number > x) {
rounded_number <- rounded_number - 10
}
} else if (direction == "up") {
# Round up to the nearest 5
rounded_number <- floor(x / 10) * 10 + 5
if (rounded_number < x) {
rounded_number <- rounded_number + 10
}
} else {
stop("Invalid direction specified. Use 'down' or 'up'.")
}
return(rounded_number)
}
#Import predictor data
file_path <- "C:/Users/adamen/Universitetet i Oslo/GIS_layers_Norway - Documents/compressed/"
#Import predictor data
file_path <- "C:/Users/adamen/Universitetet i Oslo/GIS_layers_Norway - Documents/predictors_Adam/"
list_paths <- list.files(file_path, pattern = "tif$", full.names = TRUE)
list_paths
mask_layer <- rast(list_paths[[13]])
mask_layer
mask_layer <- rast(list_paths[[20]])
mask_layer
mask_layer <- rast(list_paths[[24]])
mask_layer
# Install and load necessary packages
library(sf)
library(fasterize)
library(raster)
library(terra)
library(stringr)
#Create function that rounds to the nearest five
round.to.five <- function(x, direction = "down") {
if (direction == "down") {
# Round down to the nearest 5
rounded_number <- floor(x / 10) * 10 + 5
if (rounded_number > x) {
rounded_number <- rounded_number - 10
}
} else if (direction == "up") {
# Round up to the nearest 5
rounded_number <- floor(x / 10) * 10 + 5
if (rounded_number < x) {
rounded_number <- rounded_number + 10
}
} else {
stop("Invalid direction specified. Use 'down' or 'up'.")
}
return(rounded_number)
}
#Import predictor data
file_path <- "C:/Users/adamen/Universitetet i Oslo/GIS_layers_Norway - Documents/predictors_Adam/"
list_paths <- list.files(file_path, pattern = "tif$", full.names = TRUE)
list_paths
mask_layer <- rast(list_paths[[1]])
mask_layer
mask_layer <- rast(list_paths[[2]])
mask_layer
mask_layer <- rast(list_paths[[3]])
mask_layer
mask_layer <- rast(list_paths[[4]])
mask_layer
mask_layer <- rast(list_paths[[5]])
mask_layer
mask_layer <- rast(list_paths[6]])
mask_layer
mask_layer <- rast(list_paths[[6]])
mask_layer
mask_layer <- rast(list_paths[[7]])
mask_layer
mask_layer <- rast(list_paths[[8]])
mask_layer
mask_layer <- rast(list_paths[[8]])
mask_layer
mask_layer <- rast(list_paths[[9]])
mask_layer
list_paths
mask_layer <- rast(list_paths[[24]])
mask_layer
x <- rnorm(n = 100, mean = 0, sd = 10)
y <- rnorm(n = 100, mean = 0, sd = 1)
plot(x, y)
plot(x, y, xlim = c(-30, 30), ylim = c(-30, 30))
x <- rnorm(n = 100, mean = 0, sd = 5)
y <- rnorm(n = 100, mean = 0, sd = 1)
plot(x, y, xlim = c(-30, 30), ylim = c(-30, 30))
x <- rnorm(n = 100, mean = 0, sd = 3)
y <- rnorm(n = 100, mean = 0, sd = 1)
x
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)))
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 2)
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 2, pch = 16)
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 0.5, pch = 16)
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 0.8, pch = 16)
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 0.6, pch = 16)
cov(x, y)
vcov(x, y)
cov(x, y)
z <- rnorm(n = 100, mean = 0, sd = 5)
cov(x, y, z)
cov(x, y)
?cov
x
cov(x, y)
var(x, y)
matrix(data = c(x, y, z), ncol = 100, nrow = 3)
matrix(data = c(x, y, z), ncol = 3, nrow = 100)
data <- matrix(data = c(x, y, z), ncol = 3, nrow = 100)
cov(data)
cov(data, method = "kendall")
cov(data, method = "spearman")
cov(data, method = "pearson")
cov
cov2cor(data, method = "pearson")
cov2cor(data)
cov2cor
data
cov(data)
sqrt(cov(data))
cov_matrix <- cov(data)
cov_matrix
sqrt(cov_matrix)
determinant(cov_matrix)
?determinant
data * t(data)
data
t(data)
data[,1] * t(data[,1])
data[,1] * data[,1]
data[,1] * t(data[,1])
data[,1] * data[,1]
data[,1] %*% t(data[,1])
data %*% t(data)
dim(data %*% t(data))
pi
1/sqrt(2*pi)
1/sqrt(2*pi*sd(x))
exp(x)
(1/2)*exp(x-mean(x))
(1/2)*exp(x-mean(x))^2
((1/2)*exp((x-mean(x))/(sd(x)))^2)*(1/sqrt(2*pi*sd(x)))
plot(((1/2)*exp((x-mean(x))/(sd(x)))^2)*(1/sqrt(2*pi*sd(x))))
normalization <. (1/sqrt(2*pi*sd(x)))
normalization <- (1/sqrt(2*pi*sd(x)))
normalization <- 1/(sd(x)*sqrt(2*pi))
normalization
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normalization * distribution
normal_distribution <- normalization * distribution
plot(normal_distribution)
x <- seq(from = 40, to = 100, by = 0.1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution)
x <- seq(from = 0, to = 100, by = 0.1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution)
x <- seq(from = 0, to = 100, by = 0.01)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution)
plot(normal_distribution, pch = 16, cex = 0.2)
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = 0, to = 100, by = 0.001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
rnorm(n = 10000, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
rnorm(n = 100, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
rnorm(n = 10, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x = rnorm(n = 10, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x = rnorm(n = 100, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x = rnorm(n = 1000, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x = rnorm(n = 0, mean = 0, sd = 1)
x = rnorm(n = 10000, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = 0, to = 100, by = 0.001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -1, to = 1, by = 0.001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -1, to = 1, by = 0.0001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -1, to = 1, by = 0.0001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -1, to = 1, by = 0.01)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -10, to = 10, by = 0.01)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -0.1, to = 0.1, by = 0.01)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -0.1, to = 0.1, by = 0.001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -0.1, to = 0.1, by = 0.00001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
sd(x)
mean(x)
![](images/geom3.png)
install.packages("bookdown")
install.packages("bookdown")
library(bookdown)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
setwd("C:/Users/adamen/OneDrive - Universitetet i Oslo/documents/nin-qgis-plugin/user-guide")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
unlink("user-guide.Rmd")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
file.exists("user-guide.Rmd")
unlink("user-guide.Rmd")
file.exists("user-guide.Rmd")
list.files(pattern = "\\.Rmd$")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
unlink("_main.Rmd")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
unlink("_main.Rmd")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book()
unlink("_main.Rmd")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
remove.packages(c("rmarkdown", "bookdown"))
install.packages("rmarkdown")
install.packages("bookdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("bookdown")
bookdown::clean_book()
unlink("_main.Rmd")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book()
unlink("_main.Rmd")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book()
unlink("_main.Rmd")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book()
unlink("_main.Rmd")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
