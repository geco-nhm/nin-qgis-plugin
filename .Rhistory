} else if (direction == "up") {
# Round up to the nearest 5
rounded_number <- floor(x / 10) * 10 + 5
if (rounded_number < x) {
rounded_number <- rounded_number + 10
}
} else {
stop("Invalid direction specified. Use 'down' or 'up'.")
}
return(rounded_number)
}
#Import predictor data
file_path <- "C:/Users/adamen/Universitetet i Oslo/GIS_layers_Norway - Documents/predictors_Adam/"
list_paths <- list.files(file_path, pattern = "tif$", full.names = TRUE)
list_paths
mask_layer <- rast(list_paths[[1]])
mask_layer
mask_layer <- rast(list_paths[[2]])
mask_layer
mask_layer <- rast(list_paths[[3]])
mask_layer
mask_layer <- rast(list_paths[[4]])
mask_layer
mask_layer <- rast(list_paths[[5]])
mask_layer
mask_layer <- rast(list_paths[6]])
mask_layer
mask_layer <- rast(list_paths[[6]])
mask_layer
mask_layer <- rast(list_paths[[7]])
mask_layer
mask_layer <- rast(list_paths[[8]])
mask_layer
mask_layer <- rast(list_paths[[8]])
mask_layer
mask_layer <- rast(list_paths[[9]])
mask_layer
list_paths
mask_layer <- rast(list_paths[[24]])
mask_layer
x <- rnorm(n = 100, mean = 0, sd = 10)
y <- rnorm(n = 100, mean = 0, sd = 1)
plot(x, y)
plot(x, y, xlim = c(-30, 30), ylim = c(-30, 30))
x <- rnorm(n = 100, mean = 0, sd = 5)
y <- rnorm(n = 100, mean = 0, sd = 1)
plot(x, y, xlim = c(-30, 30), ylim = c(-30, 30))
x <- rnorm(n = 100, mean = 0, sd = 3)
y <- rnorm(n = 100, mean = 0, sd = 1)
x
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)))
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 2)
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 2, pch = 16)
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 0.5, pch = 16)
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 0.8, pch = 16)
plot(x, y, xlim = c(min(x), max(x)), ylim = c(min(x), max(x)), cex = 0.6, pch = 16)
cov(x, y)
vcov(x, y)
cov(x, y)
z <- rnorm(n = 100, mean = 0, sd = 5)
cov(x, y, z)
cov(x, y)
?cov
x
cov(x, y)
var(x, y)
matrix(data = c(x, y, z), ncol = 100, nrow = 3)
matrix(data = c(x, y, z), ncol = 3, nrow = 100)
data <- matrix(data = c(x, y, z), ncol = 3, nrow = 100)
cov(data)
cov(data, method = "kendall")
cov(data, method = "spearman")
cov(data, method = "pearson")
cov
cov2cor(data, method = "pearson")
cov2cor(data)
cov2cor
data
cov(data)
sqrt(cov(data))
cov_matrix <- cov(data)
cov_matrix
sqrt(cov_matrix)
determinant(cov_matrix)
?determinant
data * t(data)
data
t(data)
data[,1] * t(data[,1])
data[,1] * data[,1]
data[,1] * t(data[,1])
data[,1] * data[,1]
data[,1] %*% t(data[,1])
data %*% t(data)
dim(data %*% t(data))
pi
1/sqrt(2*pi)
1/sqrt(2*pi*sd(x))
exp(x)
(1/2)*exp(x-mean(x))
(1/2)*exp(x-mean(x))^2
((1/2)*exp((x-mean(x))/(sd(x)))^2)*(1/sqrt(2*pi*sd(x)))
plot(((1/2)*exp((x-mean(x))/(sd(x)))^2)*(1/sqrt(2*pi*sd(x))))
normalization <. (1/sqrt(2*pi*sd(x)))
normalization <- (1/sqrt(2*pi*sd(x)))
normalization <- 1/(sd(x)*sqrt(2*pi))
normalization
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normalization * distribution
normal_distribution <- normalization * distribution
plot(normal_distribution)
x <- seq(from = 40, to = 100, by = 0.1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution)
x <- seq(from = 0, to = 100, by = 0.1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution)
x <- seq(from = 0, to = 100, by = 0.01)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution)
plot(normal_distribution, pch = 16, cex = 0.2)
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = 0, to = 100, by = 0.001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
rnorm(n = 10000, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
rnorm(n = 100, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
rnorm(n = 10, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x = rnorm(n = 10, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x = rnorm(n = 100, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x = rnorm(n = 1000, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x = rnorm(n = 0, mean = 0, sd = 1)
x = rnorm(n = 10000, mean = 0, sd = 1)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = 0, to = 100, by = 0.001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -1, to = 1, by = 0.001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -1, to = 1, by = 0.0001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -1, to = 1, by = 0.0001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -1, to = 1, by = 0.01)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -10, to = 10, by = 0.01)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -0.1, to = 0.1, by = 0.01)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -0.1, to = 0.1, by = 0.001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
x <- seq(from = -0.1, to = 0.1, by = 0.00001)
normalization <- 1 / (sd(x) * sqrt(2 * pi))
distribution <- exp((-1 / 2) * ((x - mean(x)) / (sd(x)))^2)
normal_distribution <- normalization * distribution
plot(normal_distribution, pch = 16, cex = 0.1)
sd(x)
mean(x)
setwd("C:/Users/adamen/OneDrive - Universitetet i Oslo/documents/nin-qgis-plugin")
# Set working directory to the book source
setwd("user-guide")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Back to the repo root
setwd("..")
# Add all changes and commit (source + _book)
system('git add -A')
system('git commit -m "Update book"')
# Push latest source changes
system('git push')
# Push _book/ to gh-pages
system('git subtree push --prefix user-guide/_book origin gh-pages')
# Set working directory to the book source
setwd("user-guide")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
unlink("_main.Rmd")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
## Arbeidsflyt
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
unlink(_main.Rmd)
unlink(_main.pdf)
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
unlink(_main.Rmd)
unlink("_main.Rmd")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
unlink("_main.Rmd")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
unlink("_main.pdf")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
setwd("C:/Users/adamen/OneDrive - Universitetet i Oslo/documents/nin-qgis-plugin")
# Set working directory to the book source
setwd("user-guide")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
unlink("book.Rmd")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
unlink("book.Rmd")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Set working directory to the book source
setwd("user-guide")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
# Back to the repo root
setwd("..")
# Add all changes and commit (source + _book)
system('git add -A')
system('git commit -m "Update book"')
# Push latest source changes
system('git push')
# Set working directory to the book source
setwd("user-guide")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book", output_dir = "../../")
# Back to the repo root
setwd("..")
# Add all changes and commit (source + _book)
system('git add -A')
system('git commit -m "Update book"')
# Push latest source changes
system('git push')
# Set working directory to the book source
setwd("user-guide")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book", output_dir = "../../")
# Back to the repo root
setwd("..")
# Add all changes and commit (source + _book)
system('git add -A')
system('git commit -m "Update book"')
# Push latest source changes
system('git push')
# Push _book/ to gh-pages
system('git subtree push --prefix user-guide/_book origin gh-pages')
# Set working directory to the book source
setwd("user-guide")
# Render the book (HTML GitBook version)
bookdown::render_book("index.Rmd", output_format = "bookdown::gitbook")
# Render the book (PDF version)
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book", output_dir = "../../")
# Back to the repo root
setwd("..")
# Add all changes and commit (source + _book)
system('git add -A')
system('git commit -m "Update book"')
# Push latest source changes
system('git push')
# Push _book/ to gh-pages
system('git subtree push --prefix user-guide/_book origin gh-pages')
